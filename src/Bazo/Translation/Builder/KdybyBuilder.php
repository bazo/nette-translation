<?php

namespace Bazo\Translation\Builder;


use Nette\Neon\Neon;

/**
 * @author Martin Bažík <martin@bazik.sk>
 */
class KdybyBuilder
{

	private $metadata;

	public function addMetadata($key, $value)
	{
		$this->metadata[$key] = $value;
		return $this;
	}


	public function build($fileMask, $data, $defaultDomain, $overwrite)
	{
		$messagesByDomain = [];
		foreach ($data['messages'] as $index => $messageData) {
			$message = $messageData['singular'];
			if (strpos($message, '.') !== FALSE && strpos($message, ' ') === FALSE) {
				list($domain, $message) = explode('.', $message, 2);
			} else {
				$domain = $defaultDomain;
			}

			$messagesByDomain[$domain][] = $message;
		}
		return $this->buildLanguageFiles($fileMask, $messagesByDomain, $overwrite);
	}


	public function buildLanguageFiles($fileMask, $messagesByDomain, $overwrite)
	{
		$outputFiles = [];
		foreach ($messagesByDomain as $domain => $messages) {
			$data = [];
			foreach ($messages as $message) {
				$data[$message] = $message;
			}

			$file = sprintf($fileMask, $domain);

			if (!$overwrite && file_exists($file)) {
				$this->mergeFile($file, $data);
			} else {
				$this->overwriteFile($file, $data);
			}


			$outputFiles[] = $file;
		}

		return $outputFiles;
	}


	private function overwriteFile($file, $data)
	{
		file_put_contents($file, $this->dump($data));
	}


	private function mergeFile($file, $data)
	{
		$contents = Neon::decode(file_get_contents($file));
		file_put_contents($file, $this->dump(array_merge($data, $contents)));
	}


	public function dump(array $data, $comment = "# generated by Translation Builder\n\n")
	{
		return $comment . Neon::encode($data, Neon::BLOCK);
	}


}
