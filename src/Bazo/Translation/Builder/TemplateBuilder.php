<?php

namespace Bazo\Translation\Builder;

use Bazo\Translation\Extraction\Context;
use Nette\Neon\Neon;



/**
 * @author Martin Bažík <martin@bazik.sk>
 */
class TemplateBuilder
{

	const DEFAULT_DOMAIN = 'messages';

	private $metadata;

	public function addMetadata($key, $value)
	{
		$this->metadata[$key] = $value;
		return $this;
	}


	public function buildTemplate($file, $data)
	{
		$data = $this->formatTemplateData($data);
		file_put_contents($file, $this->dump($data));
	}


	public function formatTemplateData($data)
	{
		$messages = [];

		foreach ($data as $entry) {
			$id = $entry[Context::SINGULAR];
			if (strlen($id) < 2) {
				continue;
			}

			if (strpos($id, '.') !== FALSE && strpos($id, ' ') === FALSE) {
				list($domain, $message) = explode('.', $id, 2);
			} else {
				$domain = self::DEFAULT_DOMAIN;
			}

			$message = [];

			if (isset($entry[Context::CONTEXT])) {
				$message['context'] = $entry[Context::CONTEXT];
			}

			$message['singular'] = $id;
			if (isset($entry[Context::PLURAL])) {
				$message['plural'] = $entry[Context::PLURAL];
			}

			foreach ($entry['files'] as $fileReference) {
				$message['files'][] = $fileReference;
			}

			$message['translations'] = [""];

			$messages[$id] = $message;
		}

		ksort($messages);

		$struct = array(
			'messages' => $messages
		);

		return $struct;
	}


	public function dump(array $data, $comment = "# generated by Translation Builder\n\n")
	{
		return $comment . Neon::encode($data, Neon::BLOCK);
	}


}